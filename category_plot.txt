import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import numpy as np

from typing import List

def plot_time_series_by_category(df: pd.DataFrame, datetime_col: str, value_col: str, 
                                  categories: List[str], start_time: str, end_time: str = None):
    """
    Plot a time series of a continuous variable with points colored by categorical labels.

    Args:
        df (pd.DataFrame): DataFrame containing the data.
        datetime_col (str): Name of the datetime column.
        value_col (str): Name of the continuous variable column.
        categories (List[str]): List of categorical labels with same length as DataFrame.
        start_time (str): Start time for the plot (format: YYYY-MM-DD HH:MM:SS).
        end_time (str): End time for the plot (format: YYYY-MM-DD HH:MM:SS). If None, includes all data after start_time.
    """
    # Convert datetime column to datetime format
    df[datetime_col] = pd.to_datetime(df[datetime_col])

    # Ensure categories list has the same length as the DataFrame
    if len(categories) != len(df):
        raise ValueError("The length of the categories list must match the number of rows in the DataFrame.")

    # Add the categories to the DataFrame
    df['Category'] = categories

    # Filter DataFrame for the given time range
    if end_time is None:
        mask = (df[datetime_col] >= start_time)
    else:
        mask = (df[datetime_col] >= start_time) & (df[datetime_col] <= end_time)

    filtered_df = df[mask]

    # Check if filtered DataFrame is empty
    if filtered_df.empty:
        raise ValueError("No data available in the specified time range.")

    # Plot the data
    plt.figure(figsize=(12, 6))

    for category in filtered_df['Category'].unique():
        category_df = filtered_df[filtered_df['Category'] == category]
        plt.scatter(category_df[datetime_col], category_df[value_col], label=category, alpha=0.7)

    plt.xlabel('Datetime')
    plt.ylabel(value_col)
    plt.title(f"{value_col} over Time by Category")

    # Improve the x-axis formatting for dates
    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d %H:%M'))
    plt.gca().xaxis.set_major_locator(mdates.AutoDateLocator())
    plt.xticks(rotation=45)

    plt.legend(title="Category")
    plt.grid(True, linestyle='--', alpha=0.5)
    plt.tight_layout()
    plt.show()

# Example usage
# Assuming you have a DataFrame `df` with datetime, value, and a list of categories:
# plot_time_series_by_category(df, 'Datetime', 'Value', categories_list, '2024-12-01 00:00:00', '2024-12-01 23:59:59')

# Example DataFrame creation
np.random.seed(42)  # For reproducibility
n_points = 1000
datetime_range = pd.date_range(start="2024-12-01 00:00:00", periods=n_points, freq='H')
values = np.random.rand(n_points) * 100  # Random continuous values
categories_list = np.random.choice(['A', 'B', 'C'], size=n_points)  # Random categories

# Create DataFrame
df = pd.DataFrame({
    'Datetime': datetime_range,
    'Value': values
})

# Call the function with example data
plot_time_series_by_category(
    df,
    datetime_col='Datetime',
    value_col='Value',
    categories=categories_list,
    start_time='2024-12-01 00:00:00'
)
