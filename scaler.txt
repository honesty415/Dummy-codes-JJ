def normalize_common_columns(dfs, method='standard'):
    """
    Normalize float columns that are common across all DataFrames in dfs using a single scaler.
    
    Parameters:
    - dfs: list of DataFrames, each with potentially differing columns.
    - method: 'standard' for StandardScaler or 'minmax' for MinMaxScaler.
    
    Returns:
    - normalized_dfs: list of DataFrames, each normalized using the same scaler for common float columns.
    - scaler: the scaler object used for normalization.
    - common_columns: list of float columns that were normalized.
    """
    # Identify common columns across all DataFrames
    common_columns = set.intersection(*(set(df.columns) for df in dfs))
    
    # Filter for float columns only
    float_columns = set.intersection(*(set(df.select_dtypes(include=['float64']).columns) for df in dfs))
    common_float_columns = list(common_columns.intersection(float_columns))
    
    # Select scaler based on method
    if method == 'standard':
        scaler = StandardScaler()
    elif method == 'minmax':
        scaler = MinMaxScaler()
    else:
        raise ValueError("Method must be 'standard' or 'minmax'")
    
    # Concatenate all DataFrames for scaler fitting
    all_data = pd.concat(dfs, ignore_index=True)
    
    # Fit the scaler on the common float columns
    scaler.fit(all_data[common_float_columns])
    
    # Normalize each DataFrame using the fitted scaler
    normalized_dfs = []
    for df in dfs:
        df_normalized = df.copy()
        if common_float_columns:
            df_normalized[common_float_columns] = scaler.transform(df[common_float_columns])
        normalized_dfs.append(df_normalized)
    
    return normalized_dfs, scaler, common_float_columns
