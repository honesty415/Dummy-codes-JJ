import matplotlib.pyplot as plt
import pandas as pd
import matplotlib.dates as mdates

def plot_with_intervals(df, columns, time_interval='h', start_hour=7):
    """
    Plot specified columns from a DataFrame with vertical lines at specified time intervals.
    Allows setting the start hour for 'd' intervals.
    
    Args:
    df (pd.DataFrame): Input DataFrame containing a 'DATE_TIME' column.
    columns (list): List of column names to plot.
    time_interval (str): Time interval for vertical lines ('h', 'd', 'w', 'm').
    start_hour (int): Start hour for daily intervals (e.g., 7 for 7:00 AM).
    """
    # Convert 'DATE_TIME' column to datetime
    df['DATE_TIME'] = pd.to_datetime(df['DATE_TIME'])
    
    # Set up the plot
    plt.figure(figsize=(12, 6))
    
    # Plot each specified column
    for col in columns:
        plt.plot(df['DATE_TIME'], df[col], label=col)
    
    # Generate vertical lines based on time_interval
    if time_interval == 'h':
        locator = mdates.HourLocator(interval=1)
    elif time_interval == 'd':
        # Generate daily intervals starting from start_hour
        custom_dates = pd.date_range(
            start=df['DATE_TIME'].min().replace(hour=start_hour, minute=0, second=0),
            end=df['DATE_TIME'].max(),
            freq='24H'
        )
        for date in custom_dates:
            plt.axvline(date, color='gray', linestyle='--', alpha=0.6)
    elif time_interval == 'w':
        locator = mdates.WeekdayLocator()
        for time in mdates.num2date(locator.tick_values(df['DATE_TIME'].min(), df['DATE_TIME'].max())):
            plt.axvline(time, color='gray', linestyle='--', alpha=0.6)
    elif time_interval == 'm':
        locator = mdates.MonthLocator()
        for time in mdates.num2date(locator.tick_values(df['DATE_TIME'].min(), df['DATE_TIME'].max())):
            plt.axvline(time, color='gray', linestyle='--', alpha=0.6)
    else:
        raise ValueError("Invalid time interval. Choose from 'h', 'd', 'w', or 'm'.")
    
    # Format the x-axis
    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d %H:%M:%S'))
    plt.gcf().autofmt_xdate()  # Rotate date labels for better readability
    
    # Add legend, grid, and labels
    plt.legend()
    plt.grid(alpha=0.3)
    plt.xlabel("Time")
    plt.ylabel("Values")
    plt.title("Time Series Plot with Vertical Lines")
    plt.tight_layout()
    
    # Show the plot
    plt.show()
