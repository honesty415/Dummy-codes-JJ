import matplotlib.pyplot as plt
import pandas as pd
import matplotlib.dates as mdates

def plot_with_intervals(df, columns, time_interval='h'):
    """
    Plot specified columns from a DataFrame with vertical lines at specified time intervals.

    Args:
    df (pd.DataFrame): Input DataFrame containing a 'DATE_TIME' column.
    columns (list): List of column names to plot.
    time_interval (str): Time interval for vertical lines ('h', 'd', 'w', 'm').
    """
    # Convert 'DATE_TIME' column to datetime
    df['DATE_TIME'] = pd.to_datetime(df['DATE_TIME'])
    
    # Set up the plot
    plt.figure(figsize=(12, 6))
    
    # Plot each specified column
    for col in columns:
        plt.plot(df['DATE_TIME'], df[col], label=col)

    # Define the locator for vertical lines based on the interval
    if time_interval == 'h':
        locator = mdates.HourLocator(interval=1)
    elif time_interval == 'd':
        locator = mdates.DayLocator(interval=1)
    elif time_interval == 'w':
        locator = mdates.WeekdayLocator()
    elif time_interval == 'm':
        locator = mdates.MonthLocator()
    else:
        raise ValueError("Invalid time interval. Choose from 'h', 'd', 'w', or 'm'.")
    
    # Add vertical lines
    for time in mdates.num2date(locator.tick_values(df['DATE_TIME'].min(), df['DATE_TIME'].max())):
        plt.axvline(time, color='gray', linestyle='--', alpha=0.6)
    
    # Format the x-axis
    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d %H:%M:%S'))
    plt.gcf().autofmt_xdate()  # Rotate date labels for better readability
    
    # Add legend, grid, and labels
    plt.legend()
    plt.grid(alpha=0.3)
    plt.xlabel("Time")
    plt.ylabel("Values")
    plt.title("Time Series Plot with Vertical Lines")
    plt.tight_layout()
    
    # Show the plot
    plt.show()